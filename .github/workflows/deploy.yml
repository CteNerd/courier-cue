name: Deploy

on:
  push:
    branches:
      - main
  release:
    types: [published]

permissions:
  id-token: write
  contents: read

jobs:
  deploy-dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'release'
    environment: dev
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download API build artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: ci.yml
          name: api-dist
          path: api/dist/
          branch: main

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install web dependencies
        run: |
          cd web
          pnpm install

      - name: Build web app with production environment
        run: |
          cd web
          pnpm build
        env:
          VITE_USE_MOCK_API: false
          VITE_LOCAL_DEV: ${{ vars.VITE_LOCAL_DEV }}
          VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL }}
          VITE_COGNITO_USER_POOL_ID: ${{ vars.VITE_COGNITO_USER_POOL_ID }}
          VITE_COGNITO_CLIENT_ID: ${{ vars.VITE_COGNITO_CLIENT_ID }}
          VITE_COGNITO_DOMAIN: ${{ vars.VITE_COGNITO_DOMAIN }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: us-east-1

      - name: Create deployment bucket if not exists
        run: |
          aws s3api create-bucket \
            --bucket couriercue-dev-deployment \
            --region us-east-1 \
            2>/dev/null || echo "Bucket already exists"

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file infra/stack.yaml \
            --stack-name couriercue-dev \
            --parameter-overrides Env=dev EnableCloudFront=true \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Deploy API functions
        run: |
          chmod +x scripts/deploy-api.sh
          ./scripts/deploy-api.sh couriercue-dev dev

      - name: Get stack outputs
        id: stack-outputs
        run: |
          WEB_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name couriercue-dev \
            --query 'Stacks[0].Outputs[?OutputKey==`WebBucket`].OutputValue' \
            --output text)
          echo "WEB_BUCKET=$WEB_BUCKET" >> $GITHUB_OUTPUT

      - name: Deploy web app to S3
        run: |
          aws s3 sync web/dist/ s3://${{ steps.stack-outputs.outputs.WEB_BUCKET }} --delete

      - name: Get CloudFront distribution ID
        id: cloudfront
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name couriercue-dev \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text 2>/dev/null || echo "")
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

      - name: Invalidate CloudFront cache
        run: |
          if [ ! -z "${{ steps.cloudfront.outputs.DISTRIBUTION_ID }}" ] && [ "${{ steps.cloudfront.outputs.DISTRIBUTION_ID }}" != "None" ]; then
            echo "Invalidating CloudFront distribution: ${{ steps.cloudfront.outputs.DISTRIBUTION_ID }}"
            aws cloudfront create-invalidation \
              --distribution-id ${{ steps.cloudfront.outputs.DISTRIBUTION_ID }} \
              --paths "/*"
            echo "CloudFront cache invalidated successfully"
          else
            echo "No CloudFront distribution found"
          fi

  deploy-prod:
    name: Deploy to Prod
    runs-on: ubuntu-latest
    if: github.event_name == 'release'
    environment: prod
    needs: [deploy-dev]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: 8

      - name: Install dependencies
        run: pnpm install

      - name: Build API
        run: pnpm --filter api build

      - name: Build Web with production environment
        run: pnpm --filter web build
        env:
          VITE_USE_MOCK_API: false
          VITE_LOCAL_DEV: ${{ vars.VITE_LOCAL_DEV_PROD }}
          VITE_API_BASE_URL: ${{ vars.VITE_API_BASE_URL_PROD }}
          VITE_COGNITO_USER_POOL_ID: ${{ vars.VITE_COGNITO_USER_POOL_ID_PROD }}
          VITE_COGNITO_CLIENT_ID: ${{ vars.VITE_COGNITO_CLIENT_ID_PROD }}
          VITE_COGNITO_DOMAIN: ${{ vars.VITE_COGNITO_DOMAIN_PROD }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ secrets.AWS_DEPLOY_ROLE_ARN }}
          aws-region: us-east-1

      - name: Create deployment bucket if not exists
        run: |
          aws s3api create-bucket \
            --bucket couriercue-prod-deployment \
            --region us-east-1 \
            2>/dev/null || echo "Bucket already exists"

      - name: Package and upload Lambda functions
        run: |
          cd api/dist/functions
          zip -r functions.zip .
          aws s3 cp functions.zip s3://couriercue-prod-deployment/api/functions.zip

      - name: Deploy CloudFormation stack
        run: |
          aws cloudformation deploy \
            --template-file infra/stack.yaml \
            --stack-name couriercue-prod \
            --parameter-overrides Env=prod EnableCloudFront=true \
            --capabilities CAPABILITY_NAMED_IAM \
            --no-fail-on-empty-changeset

      - name: Deploy API functions
        run: |
          chmod +x scripts/deploy-api.sh
          ./scripts/deploy-api.sh couriercue-prod prod

      - name: Get stack outputs
        id: stack-outputs
        run: |
          WEB_BUCKET=$(aws cloudformation describe-stacks \
            --stack-name couriercue-prod \
            --query 'Stacks[0].Outputs[?OutputKey==`WebBucket`].OutputValue' \
            --output text)
          echo "WEB_BUCKET=$WEB_BUCKET" >> $GITHUB_OUTPUT

      - name: Deploy web app to S3
        run: |
          aws s3 sync web/dist/ s3://${{ steps.stack-outputs.outputs.WEB_BUCKET }} --delete

      - name: Get CloudFront distribution ID
        id: cloudfront-prod
        run: |
          DISTRIBUTION_ID=$(aws cloudformation describe-stacks \
            --stack-name couriercue-prod \
            --query 'Stacks[0].Outputs[?OutputKey==`CloudFrontDistributionId`].OutputValue' \
            --output text 2>/dev/null || echo "")
          echo "DISTRIBUTION_ID=$DISTRIBUTION_ID" >> $GITHUB_OUTPUT

      - name: Invalidate CloudFront cache
        run: |
          if [ ! -z "${{ steps.cloudfront-prod.outputs.DISTRIBUTION_ID }}" ] && [ "${{ steps.cloudfront-prod.outputs.DISTRIBUTION_ID }}" != "None" ]; then
            echo "Invalidating CloudFront distribution: ${{ steps.cloudfront-prod.outputs.DISTRIBUTION_ID }}"
            aws cloudfront create-invalidation \
              --distribution-id ${{ steps.cloudfront-prod.outputs.DISTRIBUTION_ID }} \
              --paths "/*"
            echo "CloudFront cache invalidated successfully"
          else
            echo "No CloudFront distribution found"
          fi
