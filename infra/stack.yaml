AWSTemplateFormatVersion: '2010-09-09'
Description: 'CourierCue Multi-Tenant SaaS Infrastructure'

Parameters:
  Env:
    Type: String
    AllowedValues:
      - dev
      - prod
    Default: dev
    Description: Environment name (dev or prod)
  
  EnableCloudFront:
    Type: String
    AllowedValues:
      - 'true'
      - 'false'
    Default: 'false'
    Description: Enable CloudFront distribution for the web app
  
  WebDomainName:
    Type: String
    Default: ''
    Description: Optional custom domain name for the web app (requires ACM certificate)
  
  WebDomainCertificateArn:
    Type: String
    Default: ''
    Description: ACM certificate ARN for the custom domain (must be in us-east-1 for CloudFront)

Resources:
  # S3 Buckets
  WebBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'couriercue-${Env}-web'
      PublicAccessBlockConfiguration: !If
        - EnableCloudFrontCondition
        - BlockPublicAcls: true
          BlockPublicPolicy: true
          IgnorePublicAcls: true
          RestrictPublicBuckets: true
        - BlockPublicAcls: false
          BlockPublicPolicy: false
          IgnorePublicAcls: false
          RestrictPublicBuckets: false
      WebsiteConfiguration:
        IndexDocument: index.html
        ErrorDocument: index.html
      VersioningConfiguration:
        Status: Enabled
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ['*']
            AllowedMethods: [GET, HEAD]
            AllowedHeaders: ['*']
            MaxAge: 3600

  WebBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref WebBucket
      PolicyDocument:
        Statement: !If
          - EnableCloudFrontCondition
          - - Effect: Allow
              Principal:
                Service: cloudfront.amazonaws.com
              Action: 's3:GetObject'
              Resource: !Sub '${WebBucket.Arn}/*'
              Condition:
                StringEquals:
                  'AWS:SourceArn': !Sub 'arn:aws:cloudfront::${AWS::AccountId}:distribution/${CloudFrontDistribution}'
          - - Effect: Allow
              Principal: '*'
              Action: 's3:GetObject'
              Resource: !Sub '${WebBucket.Arn}/*'

  AssetsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'couriercue-${Env}-assets'
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: TransitionToIA
            Status: Enabled
            Transitions:
              - TransitionInDays: 30
                StorageClass: STANDARD_IA
      CorsConfiguration:
        CorsRules:
          - AllowedOrigins: ['*']
            AllowedMethods: [GET, PUT, POST, HEAD]
            AllowedHeaders: ['*']
            MaxAge: 3600

  # DynamoDB Table
  MainTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: !Sub 'couriercue-${Env}-main'
      BillingMode: PAY_PER_REQUEST
      PointInTimeRecoverySpecification:
        PointInTimeRecoveryEnabled: !If [IsProd, true, false]
      AttributeDefinitions:
        - AttributeName: PK
          AttributeType: S
        - AttributeName: SK
          AttributeType: S
        - AttributeName: GSI1PK
          AttributeType: S
        - AttributeName: GSI1SK
          AttributeType: S
        - AttributeName: GSI2PK
          AttributeType: S
        - AttributeName: GSI2SK
          AttributeType: S
        - AttributeName: GSI3PK
          AttributeType: S
        - AttributeName: GSI3SK
          AttributeType: S
        - AttributeName: GSI4PK
          AttributeType: S
        - AttributeName: GSI4SK
          AttributeType: S
      KeySchema:
        - AttributeName: PK
          KeyType: HASH
        - AttributeName: SK
          KeyType: RANGE
      GlobalSecondaryIndexes:
        - IndexName: GSI1
          KeySchema:
            - AttributeName: GSI1PK
              KeyType: HASH
            - AttributeName: GSI1SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI2
          KeySchema:
            - AttributeName: GSI2PK
              KeyType: HASH
            - AttributeName: GSI2SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI3
          KeySchema:
            - AttributeName: GSI3PK
              KeyType: HASH
            - AttributeName: GSI3SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL
        - IndexName: GSI4
          KeySchema:
            - AttributeName: GSI4PK
              KeyType: HASH
            - AttributeName: GSI4SK
              KeyType: RANGE
          Projection:
            ProjectionType: ALL

  # CloudFront Distribution (conditional)
  CloudFrontOriginAccessControl:
    Type: AWS::CloudFront::OriginAccessControl
    Condition: EnableCloudFrontCondition
    Properties:
      OriginAccessControlConfig:
        Name: !Sub 'couriercue-${Env}-oac'
        OriginAccessControlOriginType: s3
        SigningBehavior: always
        SigningProtocol: sigv4

  CloudFrontDistribution:
    Type: AWS::CloudFront::Distribution
    Condition: EnableCloudFrontCondition
    Properties:
      DistributionConfig:
        Aliases: !If
          - HasCustomDomain
          - [!Ref WebDomainName]
          - !Ref AWS::NoValue
        Comment: !Sub 'CourierCue ${Env} Distribution'
        DefaultCacheBehavior:
          TargetOriginId: !Sub 'S3-${WebBucket}'
          ViewerProtocolPolicy: redirect-to-https
          CachePolicyId: 658327ea-f89d-4fab-a63d-7e88639e58f6  # Managed-CachingOptimized
          OriginRequestPolicyId: 88a5eaf4-2fd4-4709-b370-b4c650ea3fcf  # Managed-CORS-S3Origin
          ResponseHeadersPolicyId: 5cc3b908-e619-4b99-88e5-2cf7f45965bd  # Managed-SimpleCORS
          Compress: true
        DefaultRootObject: index.html
        Enabled: true
        HttpVersion: http2
        IPV6Enabled: true
        Origins:
          - Id: !Sub 'S3-${WebBucket}'
            DomainName: !GetAtt WebBucket.RegionalDomainName
            S3OriginConfig:
              OriginAccessIdentity: ''
            OriginAccessControlId: !Ref CloudFrontOriginAccessControl
        PriceClass: PriceClass_100
        ViewerCertificate: !If
          - HasCustomDomain
          - AcmCertificateArn: !Ref WebDomainCertificateArn
            SslSupportMethod: sni-only
            MinimumProtocolVersion: TLSv1.2_2021
          - CloudFrontDefaultCertificate: true
        CustomErrorResponses:
          - ErrorCode: 403
            ResponseCode: 200
            ResponsePagePath: /index.html
          - ErrorCode: 404
            ResponseCode: 200
            ResponsePagePath: /index.html

  # Cognito User Pool
  UserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: !Sub 'couriercue-${Env}'
      UsernameAttributes:
        - email
      AutoVerifiedAttributes:
        - email
      Schema:
        - Name: email
          Required: true
          Mutable: false
        - Name: orgId
          AttributeDataType: String
          Mutable: false
        - Name: role
          AttributeDataType: String
          Mutable: true
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: false
      AccountRecoverySetting:
        RecoveryMechanisms:
          - Name: verified_email
            Priority: 1

  UserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: !Sub 'couriercue-${Env}-client'
      UserPoolId: !Ref UserPool
      GenerateSecret: false
      ExplicitAuthFlows:
        - ALLOW_USER_SRP_AUTH
        - ALLOW_REFRESH_TOKEN_AUTH
      PreventUserExistenceErrors: ENABLED
      AllowedOAuthFlows:
        - code
      AllowedOAuthScopes:
        - openid
        - email
        - profile
      AllowedOAuthFlowsUserPoolClient: true
      CallbackURLs:
        - !If
          - IsDev
          - 'http://localhost:5173/callback'
          - !Sub 'https://${WebBucket}.s3-website-${AWS::Region}.amazonaws.com/callback'
      LogoutURLs:
        - !If
          - IsDev
          - 'http://localhost:5173/'
          - !Sub 'https://${WebBucket}.s3-website-${AWS::Region}.amazonaws.com/'
      SupportedIdentityProviders:
        - COGNITO

  UserPoolDomain:
    Type: AWS::Cognito::UserPoolDomain
    Properties:
      Domain: !Sub 'couriercue-${Env}-${AWS::AccountId}'
      UserPoolId: !Ref UserPool

  # Lambda Execution Role
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub 'couriercue-${Env}-lambda-role'
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole'
      Policies:
        - PolicyName: DynamoDBAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'dynamodb:GetItem'
                  - 'dynamodb:PutItem'
                  - 'dynamodb:UpdateItem'
                  - 'dynamodb:DeleteItem'
                  - 'dynamodb:Query'
                  - 'dynamodb:Scan'
                Resource:
                  - !GetAtt MainTable.Arn
                  - !Sub '${MainTable.Arn}/index/*'
        - PolicyName: S3Access
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 's3:GetObject'
                  - 's3:PutObject'
                  - 's3:DeleteObject'
                Resource: !Sub '${AssetsBucket.Arn}/*'
        - PolicyName: SESAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'ses:SendEmail'
                  - 'ses:SendRawEmail'
                Resource: '*'
        - PolicyName: CognitoAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - 'cognito-idp:AdminCreateUser'
                  - 'cognito-idp:AdminUpdateUserAttributes'
                  - 'cognito-idp:AdminDisableUser'
                  - 'cognito-idp:AdminEnableUser'
                  - 'cognito-idp:AdminGetUser'
                  - 'cognito-idp:ListUsers'
                  - 'cognito-idp:AdminAddUserToGroup'
                  - 'cognito-idp:AdminListGroupsForUser'
                Resource: !GetAtt UserPool.Arn

  # API Gateway HTTP API
  HttpApi:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: !Sub 'couriercue-${Env}'
      ProtocolType: HTTP
      CorsConfiguration:
        AllowOrigins:
          - !If
            - IsDev
            - 'http://localhost:5173'
            - !Sub 'https://${WebBucket}.s3-website-${AWS::Region}.amazonaws.com'
        AllowMethods:
          - GET
          - POST
          - PUT
          - PATCH
          - DELETE
          - OPTIONS
        AllowHeaders:
          - '*'
        MaxAge: 300

  HttpApiAuthorizer:
    Type: AWS::ApiGatewayV2::Authorizer
    Properties:
      Name: CognitoAuthorizer
      ApiId: !Ref HttpApi
      AuthorizerType: JWT
      IdentitySource:
        - '$request.header.Authorization'
      JwtConfiguration:
        Audience:
          - !Ref UserPoolClient
        Issuer: !Sub 'https://cognito-idp.${AWS::Region}.amazonaws.com/${UserPool}'

  # API Gateway Routes and Integrations
  # Organization Routes
  OrgGetSettingsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'GET /org/settings'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${OrgGetSettingsIntegration}'

  OrgGetSettingsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt OrgGetSettingsFunction.Arn
      PayloadFormatVersion: '2.0'

  OrgGetSettingsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OrgGetSettingsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  OrgUpdateSettingsRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'PATCH /org/settings'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${OrgUpdateSettingsIntegration}'

  OrgUpdateSettingsIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt OrgUpdateSettingsFunction.Arn
      PayloadFormatVersion: '2.0'

  OrgUpdateSettingsFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OrgUpdateSettingsFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  OrgListUsersRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'GET /org/users'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${OrgListUsersIntegration}'

  OrgListUsersIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt OrgListUsersFunction.Arn
      PayloadFormatVersion: '2.0'

  OrgListUsersFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OrgListUsersFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  OrgInviteUserRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /org/users/invite'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${OrgInviteUserIntegration}'

  OrgInviteUserIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt OrgInviteUserFunction.Arn
      PayloadFormatVersion: '2.0'

  OrgInviteUserFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref OrgInviteUserFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  # Load Routes
  LoadsCreateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /loads'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${LoadsCreateIntegration}'

  LoadsCreateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LoadsCreateFunction.Arn
      PayloadFormatVersion: '2.0'

  LoadsCreateFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoadsCreateFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  LoadsListRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'GET /loads'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${LoadsListIntegration}'

  LoadsListIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LoadsListFunction.Arn
      PayloadFormatVersion: '2.0'

  LoadsListFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoadsListFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  LoadsGetRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'GET /loads/{id}'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${LoadsGetIntegration}'

  LoadsGetIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LoadsGetFunction.Arn
      PayloadFormatVersion: '2.0'

  LoadsGetFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoadsGetFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  LoadsUpdateRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'PATCH /loads/{id}'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${LoadsUpdateIntegration}'

  LoadsUpdateIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LoadsUpdateFunction.Arn
      PayloadFormatVersion: '2.0'

  LoadsUpdateFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoadsUpdateFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  LoadsMyRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'GET /loads/my'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${LoadsMyIntegration}'

  LoadsMyIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LoadsMyFunction.Arn
      PayloadFormatVersion: '2.0'

  LoadsMyFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoadsMyFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  LoadsUpdateStatusRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /loads/{id}/status'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${LoadsUpdateStatusIntegration}'

  LoadsUpdateStatusIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LoadsUpdateStatusFunction.Arn
      PayloadFormatVersion: '2.0'

  LoadsUpdateStatusFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoadsUpdateStatusFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  LoadsSignaturePresignRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /loads/{id}/signature/shipper/presign'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${LoadsSignaturePresignIntegration}'

  LoadsSignaturePresignIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LoadsSignaturePresignFunction.Arn
      PayloadFormatVersion: '2.0'

  LoadsSignaturePresignFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoadsSignaturePresignFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  LoadsSignatureConfirmRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /loads/{id}/signature/shipper/confirm'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${LoadsSignatureConfirmIntegration}'

  LoadsSignatureConfirmIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LoadsSignatureConfirmFunction.Arn
      PayloadFormatVersion: '2.0'

  LoadsSignatureConfirmFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoadsSignatureConfirmFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  LoadsGetReceiptRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'GET /loads/{id}/receipt.pdf'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${LoadsGetReceiptIntegration}'

  LoadsGetReceiptIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LoadsGetReceiptFunction.Arn
      PayloadFormatVersion: '2.0'

  LoadsGetReceiptFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoadsGetReceiptFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  LoadsSendEmailRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref HttpApi
      RouteKey: 'POST /loads/{id}/email'
      AuthorizationType: JWT
      AuthorizerId: !Ref HttpApiAuthorizer
      Target: !Sub 'integrations/${LoadsSendEmailIntegration}'

  LoadsSendEmailIntegration:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref HttpApi
      IntegrationType: AWS_PROXY
      IntegrationUri: !GetAtt LoadsSendEmailFunction.Arn
      PayloadFormatVersion: '2.0'

  LoadsSendEmailFunctionPermission:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref LoadsSendEmailFunction
      Action: lambda:InvokeFunction
      Principal: apigateway.amazonaws.com
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${HttpApi}/*/*'

  # Deployment Bucket for Lambda code
  DeploymentBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'couriercue-${Env}-deployment'
      VersioningConfiguration:
        Status: Enabled
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldVersions
            Status: Enabled
            NoncurrentVersionExpirationInDays: 7

  # Lambda Functions
  # Organization Functions
  OrgGetSettingsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-org-get-settings'
      Runtime: nodejs20.x
      Handler: org/get-settings.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  OrgUpdateSettingsFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-org-update-settings'
      Runtime: nodejs20.x
      Handler: org/update-settings.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  OrgListUsersFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-org-list-users'
      Runtime: nodejs20.x
      Handler: org/list-users.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  OrgInviteUserFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-org-invite-user'
      Runtime: nodejs20.x
      Handler: org/invite-user.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  # Load Functions
  LoadsCreateFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-loads-create'
      Runtime: nodejs20.x
      Handler: loads/create-load.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  LoadsListFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-loads-list'
      Runtime: nodejs20.x
      Handler: loads/list-loads.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  LoadsGetFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-loads-get'
      Runtime: nodejs20.x
      Handler: loads/get-load.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  LoadsUpdateFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-loads-update'
      Runtime: nodejs20.x
      Handler: loads/update-load.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  LoadsMyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-loads-my'
      Runtime: nodejs20.x
      Handler: loads/my-loads.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  LoadsUpdateStatusFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-loads-update-status'
      Runtime: nodejs20.x
      Handler: loads/update-status.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  LoadsSignaturePresignFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-loads-signature-presign'
      Runtime: nodejs20.x
      Handler: loads/signature-presign.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  LoadsSignatureConfirmFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-loads-signature-confirm'
      Runtime: nodejs20.x
      Handler: loads/signature-confirm.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  LoadsGetReceiptFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-loads-get-receipt'
      Runtime: nodejs20.x
      Handler: loads/get-receipt.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  LoadsSendEmailFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'couriercue-${Env}-loads-send-email'
      Runtime: nodejs20.x
      Handler: loads/send-email.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        S3Bucket: !Ref DeploymentBucket
        S3Key: 'api/functions.zip'
      Environment:
        Variables:
          TABLE_NAME: !Ref MainTable
          ASSETS_BUCKET: !Ref AssetsBucket
          ENV: !Ref Env
          REGION: !Ref AWS::Region
          USER_POOL_ID: !Ref UserPool

  # Log Groups for all functions
  OrgGetSettingsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${OrgGetSettingsFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  OrgUpdateSettingsFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${OrgUpdateSettingsFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  OrgListUsersFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${OrgListUsersFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  OrgInviteUserFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${OrgInviteUserFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  LoadsCreateFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoadsCreateFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  LoadsListFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoadsListFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  LoadsGetFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoadsGetFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  LoadsUpdateFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoadsUpdateFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  LoadsMyFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoadsMyFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  LoadsUpdateStatusFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoadsUpdateStatusFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  LoadsSignaturePresignFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoadsSignaturePresignFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  LoadsSignatureConfirmFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoadsSignatureConfirmFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  LoadsGetReceiptFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoadsGetReceiptFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  LoadsSendEmailFunctionLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/lambda/${LoadsSendEmailFunction}'
      RetentionInDays: !If [IsProd, 30, 7]

  # API Gateway Stage
  HttpApiStage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      ApiId: !Ref HttpApi
      StageName: '$default'
      AutoDeploy: true
      AccessLogSettings:
        DestinationArn: !GetAtt ApiLogGroup.Arn
        Format: '{"requestId":"$context.requestId","ip":"$context.identity.sourceIp","requestTime":"$context.requestTime","httpMethod":"$context.httpMethod","routeKey":"$context.routeKey","status":"$context.status","protocol":"$context.protocol","responseLength":"$context.responseLength"}'

  ApiLogGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Sub '/aws/apigateway/couriercue-${Env}'
      RetentionInDays: !If [IsProd, 30, 7]

Conditions:
  IsProd: !Equals [!Ref Env, 'prod']
  IsDev: !Equals [!Ref Env, 'dev']
  EnableCloudFrontCondition: !Equals [!Ref EnableCloudFront, 'true']
  HasCustomDomain: !Not [!Equals [!Ref WebDomainName, '']]

Outputs:
  ApiBaseUrl:
    Description: Base URL for the API
    Value: !Sub 'https://${HttpApi}.execute-api.${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-ApiBaseUrl'

  UserPoolId:
    Description: Cognito User Pool ID
    Value: !Ref UserPool
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolId'

  UserPoolClientId:
    Description: Cognito User Pool Client ID
    Value: !Ref UserPoolClient
    Export:
      Name: !Sub '${AWS::StackName}-UserPoolClientId'

  Region:
    Description: AWS Region
    Value: !Ref AWS::Region
    Export:
      Name: !Sub '${AWS::StackName}-Region'

  TableName:
    Description: DynamoDB Table Name
    Value: !Ref MainTable
    Export:
      Name: !Sub '${AWS::StackName}-TableName'

  AssetsBucket:
    Description: S3 Assets Bucket Name
    Value: !Ref AssetsBucket
    Export:
      Name: !Sub '${AWS::StackName}-AssetsBucket'

  WebBucketUrl:
    Description: S3 Web Bucket URL
    Value: !Sub 'https://${WebBucket}.s3-website-${AWS::Region}.amazonaws.com'
    Export:
      Name: !Sub '${AWS::StackName}-WebBucketUrl'

  WebBucket:
    Description: S3 Web Bucket Name
    Value: !Ref WebBucket
    Export:
      Name: !Sub '${AWS::StackName}-WebBucket'

  CognitoDomain:
    Description: Cognito Hosted UI Domain
    Value: !Sub 'https://${UserPoolDomain}.auth.${AWS::Region}.amazoncognito.com'
    Export:
      Name: !Sub '${AWS::StackName}-CognitoDomain'

  CloudFrontDistributionId:
    Condition: EnableCloudFrontCondition
    Description: CloudFront Distribution ID
    Value: !Ref CloudFrontDistribution
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDistributionId'

  CloudFrontDomainName:
    Condition: EnableCloudFrontCondition
    Description: CloudFront Distribution Domain Name (HTTPS URL)
    Value: !Sub 'https://${CloudFrontDistribution.DomainName}'
    Export:
      Name: !Sub '${AWS::StackName}-CloudFrontDomainName'
